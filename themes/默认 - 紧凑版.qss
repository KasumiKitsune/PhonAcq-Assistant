/*
 * Modern Light Tab v2.0 - The Canonical Theme
 * Author: AI Assistant (Successor)
 * Date: [Current Date]
 * Description: 一个明亮、干净、现代化的主题，专注于清晰度和可用性。
 *              此文件被设计为所有未来主题的“模范蓝本(Canonical Blueprint)”，
 *              包含了详尽的注释和对几乎所有可定制控件的样式定义。
 *
 * @icon-path: "../assets/icons" 
 * ^-- [核心] 此声明告诉主程序，本主题将使用默认图标。
 *     对于自带图标的主题，应改为 "./icons" (或其他相对路径)。
/* @theme-property-compact: true */ /* [新增] 自定义属性，用于程序识别紧凑主题 */
/* == 1. 全局与基础样式 (Global & Base Styles) == */
/* ============================================================================== */
QWidget {
    /* [核心] 定义了应用范围最广的基础字体和颜色 */
    font-family: "Microsoft YaHei", "Segoe UI", "Source Han Sans SC", sans-serif;
    color: #2c3e50; /* 深蓝灰色，比纯黑更柔和 */
    font-size: 16px;
    font-weight: normal;
    /* 'background-color: transparent;' 通常是默认值，在此处省略以保持简洁 */
}

QMainWindow, QWidget#CentralWidget, QStackedWidget > QWidget, QTabWidget::pane > QWidget {
    /* [核心] 为程序的主背景窗口和内容面板设置一个统一的、非常浅的灰色背景 */
    background-color: #F7F9FC; 
}

/* ============================================================================== */
/* == 2. 容器与布局控件 (Containers & Layout Widgets) == */
/* ============================================================================== */
QGroupBox { 
    /* [技巧] GroupBox的边框和标题是其视觉核心 */
    border: 1px solid #E1E5E8;
    margin-top: 18px; /* 为标题留出空间，防止标题与上方控件重叠 */
    padding: 25px 15px 15px 15px; /* (上, 右, 下, 左) 上边距要大，以容纳标题 */
    border-radius: 8px;
}
QGroupBox::title { 
    /* [技巧] 将标题定位到边框的左上角 */
    subcontrol-origin: margin; 
    subcontrol-position: top left; 
    padding: 3px 12px;
    margin-left: 10px; 
    background-color: #F7F9FC; /* 与主背景色相同，产生“雕刻”效果 */
    color: #2c3e50;
    font-weight: bold;
    border-radius: 4px;
}

QSplitter::handle {
    /* [新增] 为窗口分割条添加样式，使其更明显 */
    background-color: #E8ECF0;
}
QSplitter::handle:horizontal {
    width: 2px;
}
QSplitter::handle:vertical {
    height: 2px;
}
QSplitter::handle:hover {
    background-color: #3B97E3; /* 悬停时变为蓝色高亮 */
}

/* ============================================================================== */
/* == 3. 标签页 (Tab Widgets) - 主次分明的设计 == */
/* ============================================================================== */

/* --- 3.1 一级标签页 (Main Tabs - 融入式样式) --- */
QTabWidget#MainTabWidget::pane { 
    border-top: 1px solid #D9DEE4;
    background-color: #FFFFFF; /* 内容区域使用纯白，与主背景形成对比 */
    border-radius: 0 0 8px 8px; /* 确保内容面板的底部圆角 */
}
QTabWidget#MainTabWidget::tab-bar { 
    alignment: left; 
}

QTabWidget#MainTabWidget QTabBar::tab {
    background-color: #E9EDF0; 
    color: #556270;
    border: 1px solid #D9DEE4;
    border-bottom: none; /* [核心] 未选中时，底部无边框 */
    font-size: 17px;
    font-weight: bold;
    margin-right: 2px;
    min-width: 130px;
    padding: 10px 20px; 
    border-top-left-radius: 8px;
    border-top-right-radius: 8px;
}
QTabWidget#MainTabWidget QTabBar::tab:hover:!selected {
    background-color: #F0F2F4;
    color: #3B97E3; /* 悬停时文本变蓝 */
}
QTabWidget#MainTabWidget QTabBar::tab:selected {
    background-color: #FFFFFF; /* [核心] 选中时，背景色与内容面板(pane)完全相同 */
    color: #3B97E3; /* 主题色 */
    border-bottom-color: #FFFFFF; /* [核心] 将底部边框颜色设为背景色，实现“隐形” */
    margin-bottom: -1px; /* [核心] 将标签向下移动1px，完美覆盖pane的顶部边框，实现无缝融合 */
}

/* --- 3.2 二级标签页 (Sub Tabs - 下划线样式) --- */
QTabWidget#SubTabWidget::pane { 
    border: none; 
}
QTabWidget#SubTabWidget::tab-bar { 
    alignment: left;
    border-bottom: 1px solid #D9DEE4; /* 只有一条底部分割线 */
}

QTabWidget#SubTabWidget QTabBar::tab {
    background: transparent;
    color: #778899;
    border: none;
    border-bottom: 3px solid transparent; /* 未选中时，下划线是透明的 */
    padding: 8px 16px;
    font-size: 16px;
    font-weight: bold;
}
QTabWidget#SubTabWidget QTabBar::tab:hover:!selected {
    color: #2c3e50; /* 悬停时文本加深 */
}
QTabWidget#SubTabWidget QTabBar::tab:selected {
    color: #3B97E3;
    border-bottom: 3px solid #3B97E3; /* [核心] 选中时，显示下划线 */
}
QTabWidget#SubTabWidget QTabBar::tab:disabled { 
    color: #B0C4DE; 
}

/* ============================================================================== */
/* == 4. 核心交互控件 (Core Interactive Widgets) == */
/* ============================================================================== */

/* --- 4.1 按钮 (QPushButton) --- */
QPushButton {
    border: 1px solid #BCC8D4; /* 边框稍深，更有立体感 */
    padding: 8px 20px; 
    border-radius: 5px; 
    font-size: 16px; 
    background-color: #FFFFFF; 
    color: #34495e;
    min-height: 28px;
}
QPushButton:hover { 
    background-color: #F8F9FA; 
    border-color: #3B97E3; /* 悬停时边框变蓝 */
}
QPushButton:pressed { 
    background-color: #E9EDF0; 
}
QPushButton:disabled { 
    background-color: #F4F6F8;
    color: #a0a0a0; 
    border-color: #E0E0E0;
}

/* [特殊] 主要操作/强调按钮 - v2.0 Enhanced Feedback */
QPushButton#AccentButton { 
    background-color: #3B97E3;
    color: #FFFFFF; 
    font-weight: bold; 
    border: 2px solid #3B97E3; /* 默认状态的隐形边框 */
    padding: 8px 20px;
}

/* --- [核心修改] 悬停时效果更强烈 --- */
QPushButton#AccentButton:hover { 
    background-color: #5DA9E8; /* 更明亮的蓝色 */
    border-color: #2F78C0;     /* 更深的蓝色边框，形成强烈对比 */
    
}

/* --- [核心修改] 按下时效果更强烈 --- */
QPushButton#AccentButton:pressed { 
    background-color: #2F78C0; /* 最深的蓝色 */
    border-color: #2c3e50;     /* 使用近乎黑色的边框，模拟凹陷 */
    
}

/* [特殊] 危险操作按钮 - v2.0 Enhanced Feedback */
QPushButton#ActionButton_Delete {
    background-color: #E57373; /* 默认的柔和红色 */
    color: #FFFFFF;
    font-weight: bold;
    border: 2px solid #E57373; /* 默认状态的隐形边框 */
    padding: 8px 20px;
}

/* --- [核心修改] 悬停时效果更强烈 --- */
QPushButton#ActionButton_Delete:hover { 
    background-color: #EF5350; /* 更鲜艳的红色 */
    border-color: #D32F2F;     /* 深红色边框，警示意味更浓 */
}

/* --- [核心修改] 按下时效果更强烈 --- */
QPushButton#ActionButton_Delete:pressed { 
    background-color: #C62828; /* 最深的红色 */
    border-color: #B71C1C;     /* 近乎暗红的边框 */
}

/* --- 4.2 输入框 (QLineEdit, QPlainTextEdit, QTextBrowser) --- */
QLineEdit, 
QPlainTextEdit, 
QTextBrowser { 
    background-color: #FFFFFF; 
    
    /* [核心修改] 默认状态下，只有底部有边框 */
    border: 1px solid transparent; /* 其他三边透明 */
    border-bottom: 1px solid #D9DEE4; /* 底部为浅灰色 */
    
    border-radius: 5px; 
    padding: 8px;
    selection-background-color: #A6CFF5;
    selection-color: #000000;
}

QLineEdit:hover, 
QPlainTextEdit:hover, 
QTextBrowser:hover {
    /* [新增] 悬停时，底部边框颜色加深 */
    border-bottom: 2px solid #91C8DB;
}

QLineEdit:focus, 
QPlainTextEdit:focus, 
QTextBrowser:focus { 
    /* [核心修改] 获得焦点时，底部边框变为主题蓝色，并加粗 */
    border: 1px solid transparent; /* 确保其他边框在焦点时也为透明 */
    border-bottom: 3px solid #3B97E3;
}

QLineEdit:disabled, 
QPlainTextEdit:disabled, 
QTextBrowser:disabled {
    background-color: #F4F6F8;
    color: #a0a0a0;
    border-bottom: 1px solid #E9EDF0; /* 禁用时底部边框更浅 */
}

QTextBrowser a { color: #3B97E3; text-decoration: none; }
QTextBrowser a:hover { text-decoration: underline; color: #2F78C0; }

/* --- 4.3 下拉框 (QComboBox) --- */
QComboBox { 
    background-color: #FFFFFF; 
    border: 1px solid #D9DEE4; 
    border-radius: 8px; /* 增加圆角 */
    padding: 7px 10px; /* 调整内边距 */
    min-height: 26px;
}

/* --- [核心修改] 悬停效果更明显 --- */
QComboBox:hover {
    border-color: #aab8c6; /* 使用与输入框悬停时一致的、更深的颜色 */
}

QComboBox:focus { 
    border: 1px solid #3B97E3; 
}

QComboBox::drop-down { 
    border: none; 
    background-color: #F4F6F8; 
    width: 20px;
    border-top-right-radius: 8px; /* 匹配更大的圆角 */
    border-bottom-right-radius: 8px; 
}
QComboBox::down-arrow {
    image: url(icon:arrow_down);
    width: 12px;
    height: 12px;
}
QComboBox QAbstractItemView { 
    border: 1px solid #D9DEE4; 
    background-color: #FFFFFF; 
    selection-background-color: #E9EDF0; 
    selection-color: #2c3e50; 
    outline: 0px; 
    border-radius: 5px;
}
QComboBox QAbstractItemView::item { 
    padding: 8px 12px; 
    min-height: 22px; 
}

/* --- 4.4 列表与表格 (QListWidget, QTableWidget) --- */
QListWidget, QTableWidget { 
    background-color: #FFFFFF; 
    border: 1px solid #D9DEE4; 
    border-radius: 5px; 
    outline: 0px; /* 去除焦点时的虚线框 */
    alternate-background-color: #F8FAFC; /* 隔行变色 */
    gridline-color: #E9EDF0; 
}
QListWidget::item {
    padding: 8px 2px; /* (上下, 左右) - 增加上下内边距以提高行高 */
}
QListWidget::item:selected, QTableWidget::item:selected { 
    background-color: #3B97E3; 
    color: #FFFFFF; 
}
QHeaderView::section { 
    background-color: #F4F6F8; 
    padding: 8px; 
    border: none;
    border-bottom: 1px solid #D9DEE4; 
    font-weight: bold; 
    color: #556270;
}
QTableCornerButton::section { /* 表格左上角的小方块 */
    background-color: #F4F6F8; 
    border: 1px solid #D9DEE4;
}

/* --- 4.5 滑块 (QSlider) & 进度条 (QProgressBar) --- */
QSlider::groove:horizontal { 
    border: none;
    height: 6px; 
    background: #E9EDF0;
    margin: 2px 0;
    border-radius: 3px; 
}
QSlider::handle:horizontal { 
    background: #FFFFFF; 
    border: 2px solid #3B97E3; 
    width: 14px; 
    height: 14px;
    margin: -6px 0; /* [技巧] 负边距使滑块能覆盖凹槽 */
    border-radius: 9px; 
}

QProgressBar { 
    border: 1px solid #D9DEE4; 
    border-radius: 5px; 
    text-align: center; 
    color: #FFFFFF; 
    height: 20px;
    background-color: #E9EDF0; 
    font-weight: bold;
}
QProgressBar::chunk { 
    background-color: #3B97E3;
    border-radius: 4px;
}

/* --- 4.6 滚动条 (QScrollBar) --- */
QScrollBar:vertical, QScrollBar:horizontal {
    border: none;
    background: #F4F6F8;
    width: 12px;
    height: 12px;
    margin: 0px;
}
QScrollBar::handle:vertical, QScrollBar::handle:horizontal {
    background: #D9DEE4;
    min-height: 30px;
    min-width: 30px;
    border-radius: 6px;
}
QScrollBar::handle:vertical:hover, QScrollBar::handle:horizontal:hover {
    background: #BCC8D4;
}
/* [技巧] 隐藏两端的箭头按钮 */
QScrollBar::add-line, QScrollBar::sub-line {
    border: none; background: transparent; height: 0; width: 0;
}

/* --- 4.7 菜单 (QMenu) --- */
QMenu {
    background-color: #FFFFFF;
    border: 1px solid #D9DEE4;
    padding: 5px;
    border-radius: 6px;
}
QMenu::item {
    padding: 8px 25px;
    border-radius: 4px;
}
QMenu::item:selected {
    background-color: #E9EDF0;
    color: #3B97E3;
}
QMenu::item:disabled { color: #a0a0a0; }
QMenu::separator { height: 1px; background: #E9EDF0; margin: 5px; }
QMenu::icon { padding-left: 8px; width: 16px; height: 16px; }

/* --- 4.8 提示框 (QToolTip) & 消息框 (QMessageBox) --- */
QToolTip {
    background-color: #34495e; /* 深色背景 */
    color: #FFFFFF; /* 白色文字 */
    border: 1px solid #34495e;
    padding: 6px 8px;
    border-radius: 4px;
    opacity: 230; /* 轻微半透明 */
}

QMessageBox, QDialog { 
    background-color: #FFFFFF;
    border: 1px solid #D9DEE4;
    border-radius: 8px;
}
QMessageBox QLabel, QDialog QLabel { 
    font-size: 16px;
}

/* ============================================================================== */
/* == 5. 自定义控件样式 (Custom Widget Styles) == */
/* ============================================================================== */
ToggleSwitch {
    qproperty-trackColorOff: #D9DEE4;      
    qproperty-trackColorOn: #3B97E3;       
    qproperty-knobColor: #FFFFFF;          
    qproperty-trackBorderRadius: 14;       
    qproperty-borderWidth: 0;
    qproperty-knobMargin: 2;               
    qproperty-knobShape: 'ellipse';      
    min-width: 50px; max-width: 50px;                       
    min-height: 28px; max-height: 28px;                      
}

/* --- [新增] 音频波形图的颜色 --- */
WaveformWidget {
    qproperty-waveformColor: #a0a0a0;    /* 波形的默认颜色 */
    qproperty-cursorColor: #E53935;      /* 播放光标的颜色 (红色) */
    qproperty-selectionColor: rgba(59, 151, 227, 60); /* 裁切选区的颜色 (带透明度的蓝色) */
}

/* ============================================================================== */
/* == 6. 模块特定样式 (Module-specific Styles) == */
/* ============================================================================== */
QLabel#ScalableImageLabel {
    border: 1px dashed #D9DEE4;
    background-color: #FFFFFF;
    color: #B0B0B0; 
    border-radius: 5px;
}
QLabel#PromptTextLabel {
    padding: 8px; font-size: 18px; font-weight: bold;
}
QTextEdit#NotesTextEdit {
    background-color: #F8FAFC; border: 1px solid #E9EDF0; 
    color: #556270;
}
QRadioButton {
    spacing: 8px; padding: 5px 0; font-weight: normal; color: #556270;
}
QRadioButton:checked { color: #2c3e50; font-weight: bold; }
QRadioButton::indicator { width: 18px; height: 18px; }
/* --- 概览波形图 (顶部的波形图) --- */
/*
 * 使用对象名选择器来为音频分析模块中的特定 WaveformWidget 指定样式，
 * 避免与音频数据管理器中的样式冲突。
 */
#AudioAnalysisPage > QWidget > WaveformWidget {
    qproperty-backgroundColor: #FFFFFF; /* 背景设为纯白，与下方语谱图一致 */
    qproperty-waveformColor: #a0a0a0;   /* 波形使用中性灰色，作为参考 */
    
    border: 1px solid #D9DEE4;         /* 与其他输入框等控件边框一致 */
    border-bottom: none;               /* 去掉下边框，与语谱图无缝连接 */
    border-radius: 8px 8px 0 0;        /* 只保留顶部圆角 */
}

/* --- 语谱图控件 (核心可视化区域) --- */
SpectrogramWidget {
    /* 语谱图颜色映射：从纯白到深蓝灰，提供清晰、柔和的视觉效果 */
    qproperty-backgroundColor: #FFFFFF;
    qproperty-spectrogramMinColor: #FFFFFF; /* 能量最低处 (背景): 纯白 */
    qproperty-spectrogramMaxColor: #2c3e50; /* 能量最高处 (前景): 深蓝灰 */
    
    /* 强度曲线颜色: 使用一个不刺眼的绿色 */
    qproperty-intensityColor: #27ae60;
    
    /* 原始F0点的颜色: 使用主题蓝，代表精确的分析结果 */
    qproperty-f0Color: #3B97E3;
    
    /* 派生F0曲线的颜色: 使用一个更柔和、半透明的蓝色 */
    qproperty-f0DerivedColor: rgba(59, 151, 227, 100);
    
    /* F1高亮颜色: 使用深邃的蓝灰色，与前景能量色一致，代表最重要信息 */
    qproperty-f1Color: #2c3e50;

    /* 其他共振峰颜色: 使用一个较浅的灰色，作为次要信息 */
    qproperty-formantColor: #7f8c8d;
    
    /* 播放头光标颜色: 使用醒目的红色，提供高对比度 */
    qproperty-cursorColor: #e74c3c;
    
    /* 鼠标悬停信息框: 采用与全局Tooltip一致的深色背景、亮色文字风格 */
    qproperty-infoTextColor: #FFFFFF;
    qproperty-infoBackgroundColor: rgba(44, 62, 80, 0.9); /* 半透明的深蓝灰 */
    
    /* 边框样式 */
    border: 1px solid #D9DEE4;
    border-radius: 0 0 8px 8px; /* 只保留底部圆角 */
}
/*
================================================================================
【新增】插件栏按钮样式 (Modern Light Tab)
================================================================================ 
*/

/* --- 主插件菜单圆形按钮 --- */
QPushButton#PluginMenuButtonCircular {
    border-radius: 16px;
    border: 1px solid #D9DEE4; /* 浅灰色边框 */
    background-color: #F7F9FC; /* 与主背景色一致 */
    /* [核心修改] 调整内边距以容纳图标和文字 */
    padding: 2px 15px 2px 10px; /* 上 右 下 左 */
    min-width: 75px; /* 设置一个最小宽度，防止被过度压缩 */
}
QPushButton#PluginMenuButtonCircular:hover {
    background-color: #FFFFFF;
    border-color: #3B97E3; /* 主题蓝 */
}
QPushButton#PluginMenuButtonCircular:pressed {
    background-color: #E9EDF0; /* 按下时变灰 */
}

/* --- 固定的插件快捷按钮 --- */
QPushButton#PinnedPluginButton {
    border-radius: 16px;
    border: 1px solid transparent;
    background-color: transparent;
    padding: 0px;
}
QPushButton#PinnedPluginButton:hover {
    background-color: #E9EDF0; /* 使用柔和的灰色作为悬停背景 */
}
QPushButton#PinnedPluginButton:pressed {
    background-color: #D9DEE4; /* 使用更深的灰色作为按下背景 */
}
/* --- 插件菜单 QToolButton 样式 (Modern Light Tab) --- */
QToolButton#PluginMenuItemToolButton {
    background-color: transparent; /* 默认透明 */
    border: 1px solid transparent; /* 默认无边框 */
    border-radius: 5px; /* 匹配主题的圆角 */
    padding: 2px; /* 适当内边距 */
    color: #2c3e50; /* 默认文本颜色 */
}
QToolButton#PluginMenuItemToolButton:hover {
    background-color: #E9EDF0; /* 亮灰色背景 */
    border: 1px solid #D9DEE4; /* 匹配主题边框 */
    color: #3B97E3; /* 文本变蓝 */
}
QToolButton#PluginMenuItemToolButton:pressed {
    background-color: #D9DEE4; /* 按下时更深 */
}
/* ============================================================================== */
/* == 7. 自定义控件悬停动作 (Custom Widget Hover Actions) == */
/* ============================================================================== */

/* --- ToggleSwitch 精细悬停效果 --- */
/*
 * 当鼠标悬停在 ToggleSwitch 上时 ([hover="true"])，
 * 我们将通过 qproperty- 修改其在 Python 中定义的自定义颜色属性。
 * 这使得悬停效果完全由主题控制。
 */
ToggleSwitch[hover="true"] {
    /* 悬停时，“开启”状态的轨道颜色变得更亮、更饱和 */
    qproperty-hoverTrackColorOn: #a45f43; /* Lighter Burnt Sienna */
    
    /* 悬停时，“关闭”状态的轨道颜色变为一个更明确的金色 */
    qproperty-hoverTrackColorOff: #B8A990; /* Gold */
    
    /* 悬停时，滑块的颜色可以变为一个温暖的米白色，以示区分 */
    qproperty-hoverKnobColor: #FDFBF8; /* Parchment */
    qproperty-hoverKnobMarginOffset: 2; /* 增加 2px 的边距，滑块会明显缩小 */
}
/* ============================================================================== */
/* == 7. 交互动作增强 (Interaction Enhancement) == */
/* ============================================================================== */

/* --- 7.1 表格与列表悬停效果 --- */

/* 为 QListWidget 的未选中项添加悬停效果 */
QListWidget::item:hover:!selected {
    background-color: #F0F2F4; /* 使用比隔行变色稍深的灰色 */
}

/* 为 QTableWidget 的未选中项添加悬停效果 */
QTableWidget::item:hover:!selected {
    background-color: #F0F2F4; /* 与 QListWidget 保持一致 */
}

/* --- 7.2 表头悬停效果 --- */
QHeaderView::section:hover {
    background-color: #E9EDF0; /* 背景色加深 */
    color: #3B97E3;            /* 文字变为主题蓝色 */
}

/* --- 7.3 表格左上角全选柄交互效果 --- */
QTableCornerButton::section:hover {
    background-color: #E9EDF0;
    border: 1px solid #BCC8D4;
}
QTableCornerButton::section:pressed {
    background-color: #D9DEE4;
    border: 1px solid #3B97E3;
}

/* --- 7.4 滑块交互效果 --- */
/* 悬停在滑块凹槽上时 */
QSlider::groove:horizontal:hover {
    background: #D9DEE4;
}
/* 按下并拖动滑块时 */
QSlider::handle:horizontal:pressed {
    background: #D9DEE4;
    border-color: #2F78C0;
}

/* --- 7.5 菜单项按下效果 --- */
QMenu::item:pressed {
    background-color: #D9DEE4; /* 背景变为更深的灰色 */
    color: #2c3e50;            /* 确保文字颜色不变 */
}

/* --- 7.6 普通QLabel悬停效果 --- */
/* 注意：此规则不适用于有特殊ID或在特定容器内的QLabel */
QLabel:hover {
    color: #3B97E3; /* 文字颜色变为主题蓝色 */
}
/* --- 7.7 滚动条与滑块交互效果补全 --- */

/* 1. 滚动条滑块的“按下”效果 */
/* 当用户按住并拖动滚动条滑块时 */
QScrollBar::handle:vertical:pressed,
QScrollBar::handle:horizontal:pressed {
    background: #aab8c6; /* 背景色变为更深的灰色 */
}

/* 2. 滑块拖动控件的“悬停”效果 */
/* 当鼠标悬停在滑块的拖动控件上时 */
QSlider::handle:horizontal:hover {
    background: #E9EDF0; /* 背景色变为浅灰色，提供一个轻微的反馈 */
}